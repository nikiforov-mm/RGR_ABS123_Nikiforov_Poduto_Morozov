import random

def have_common_div(a, b):
    ranged = max([a,b])
    for div in range(2, int(ranged ** 0.5)):
        if a % div == 0 and b % div == 0:
            return 1
    return 0
def encode(primelist):
    print ("Enter text:")
    text = input()
    g = random.randint(0, 100)
    p = prime_list[random.randint(0, 722)]
    X = random.randint(1, p-1)
    Y = pow(g, X, p)
    k = 0
    while have_common_div(k, p-1):
        k = random.randint(1, p-1)
    enc_text = []
    for char in text:
        e_modless = ord(char) * pow(Y, k)
        e = e_modless % p
        enc_text.append(e)
    print ("Encrypted text: ", enc_text)
    print ("p =", p)
    print ("g =", g)
    print ("k =", k)
    print ("X =", X)
def decode():
    print ("Enter elements:")
    e = int(input())
    enc_text = []
    while True:
        try:
            enc_text.append(e)
            e = int(input())
        except:
            break
    print(enc_text)
    print ("Enter p:")
    p = int(input())
    print ("Enter g:")
    g = int(input())
    print ("Enter k:")
    k = int(input())
    print ("Enter X:")
    X = int(input())
    r = pow(g, k, p)
    dec_text = ""
    for e in enc_text:
        modless = e * pow(r,p-1-X)
        m_s = modless % p
        dec_text = "{}{}".format(dec_text, chr(m_s))
    print("Decrypted text: ", dec_text)

primes = """2 167 389 631 883 1153 1447 1709 2011 2309 2621
3 173 397 641 887 1163 1451 1721 2017 2311 2633
5 179 401 643 907 1171 1453 1723 2027 2333 2647
7 181 409 647 911 1181 1459 1733 2029 2339 2657
11 191 419 653 919 1187 1471 1741 2039 2341 2659
13 193 421 659 929 1193 1481 1747 2053 2347 2663
17 197 431 661 937 1201 1483 1753 2063 2351 2671
19 199 433 673 941 1213 1487 1759 2069 2357 2677
23 211 439 677 947 1217 1489 1777 2081 2371 2683
29 223 443 683 953 1223 1493 1783 2083 2377 2687
31 227 449 691 967 1229 1499 1787 2087 2381 2689
37 229 457 701 971 1231 1511 1789 2089 2383 2693
41 233 461 709 977 1237 1523 1801 2099 2389 2699
43 239 463 719 983 1249 1531 1811 2111 2393 2707
47 241 467 727 991 1259 1543 1823 2113 2399 2711
53 251 479 733 997 1277 1549 1831 2129 2411 2713
59 257 487 739 1009 1279 1553 1847 2131 2417 2719
61 263 491 743 1013 1283 1559 1861 2137 2423 2729
67 269 499 751 1019 1289 1567 1867 2141 2437 2731
71 271 503 757 1021 1291 1571 1871 2143 2441 2741
73 277 509 761 1031 1297 1579 1873 2153 2447 2749
79 281 521 769 1033 1301 1583 1877 2161 2459 2753
83 283 523 773 1039 1303 1597 1879 2179 2467 2767
89 293 541 787 1049 1307 1601 1889 2203 2473 2777
97 307 547 797 1051 1319 1607 1901 2207 2477 2789
101 311 557 809 1061 1321 1609 1907 2213 2503 2791
103 313 563 811 1063 1327 1613 1913 2221 2521 2797
107 317 569 821 1069 1361 1619 1931 2237 2531 2801
109 331 571 823 1087 1367 1621 1933 2239 2539 2803
113 337 577 827 1091 1373 1627 1949 2243 2543 2819
127 347 587 829 1093 1381 1637 1951 2251 2549 2833
131 349 593 839 1097 1399 1657 1973 2267 2551 2837
137 353 599 853 1103 1409 1663 1979 2269 2557 2843
139 359 601 857 1109 1423 1667 1987 2273 2579 2851
149 367 607 859 1117 1427 1669 1993 2281 2591 2857
151 373 613 863 1123 1429 1693 1997 2287 2593 2861
157 379 617 877 1129 1433 1697 1999 2293 2609 2879
163 383 619 881 1151 1439 1699 2003 2297 2617 2887
2897 3221 3529 3821 4127 4447 4751 5051 5399 5683
2903 3229 3533 3823 4129 4451 4759 5059 5407 5689
2909 3251 3539 3833 4133 4457 4783 5077 5413 5693
2917 3253 3541 3847 4139 4463 4787 5081 5417 5701
2927 3257 3547 3851 4153 4481 4789 5087 5419 5711
2939 3259 3557 3853 4157 4483 4793 5099 5431 5717
3001 3323 3613 3917 4229 4547 4871 5167 5479 5791
3011 3329 3617 3919 4231 4549 4877 5171 5483 5801
3019 3331 3623 3923 4241 4561 4889 5179 5501 5807
3023 3343 3631 3929 4243 4567 4903 5189 5503 5813
3037 3347 3637 3931 4253 4583 4909 5197 5507 5821
3041 3359 3643 3943 4259 4591 4919 5209 5519 5827
3049 3361 3659 3947 4261 4597 4931 5227 5521 5839
3061 3371 3671 3967 4271 4603 4933 5231 5527 5843
3067 3373 3673 3989 4273 4621 4937 5233 5531 5849
3079 3389 3677 4001 4283 4637 4943 5237 5557 5851
3083 3391 3691 4003 4289 4639 4951 5261 5563 5857
3089 3407 3697 4007 4297 4643 4957 5273 5569 5861
3109 3413 3701 4013 4327 4649 4967 5279 5573 5867
3119 3433 3709 4019 4337 4651 4969 5281 5581 5869
3121 3449 3719 4021 4339 4657 4973 5297 5591 5879
3137 3457 3727 4027 4349 4663 4987 5303 5623 5881
3163 3461 3733 4049 4357 4673 4993 5309 5639 5897
3167 3463 3739 4051 4363 4679 4999 5323 5641 5903
3169 3467 3761 4057 4373 4691 5003 5333 5647 5923
3181 3469 3767 4073 4391 4703 5009 5347 5651 5927
3187 3491 3769 4079 4397 4721 5011 5351 5653 5939
3191 3499 3779 4091 4409 4723 5021 5381 5657 5953
3203 3511 3793 4093 4421 4729 5023 5387 5659 5981
3209 3517 3797 4099 4423 4733 5039 5393 5669 5987
3217 3527 3803 4111 4441"""

primes = primes.replace("\n", ' ')
primes = primes.split(' ')
prime_list = []
for prime in primes:
    prime_list.append(int(prime))
prime_list = sorted(prime_list)
print ("For encode enter 1, for decode enter 0")
choice = int(input())
if choice == 1:
    encode(prime_list)
if choice == 0:
    decode()